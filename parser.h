/* A packrat parser generated by PackCR 0.0.8 */

/* original file: https://git.ruby-lang.org/ruby.git/tree/parse.y */

#ifndef PACKCR_INCLUDED_PARSER_H
#define PACKCR_INCLUDED_PARSER_H

#include "ruby.h"
#undef __

#define NEW_NODE(t,a0,a1,a2,beg,end) tiny_ruby_parser_newnode((t),(VALUE)(a0),(VALUE)(a1),(VALUE)(a2),beg,end)

typedef struct packcr_location {
    size_t lineno;
    size_t column;
} packcr_location_t;
typedef packcr_location_t rb_code_position_t;

typedef struct rb_code_location_struct {
    rb_code_position_t beg_pos;
    rb_code_position_t end_pos;
    size_t lineno;
} rb_code_location_t;

enum node_type {
    NODE_SCOPE,
    NODE_LIT,
    NODE_STR,
    NODE_LIST,
    NODE_FCALL,
    NODE_BLOCK,
    NODE_OPCALL,
    NODE_CALL,
    NODE_QCALL,
    NODE_DEFN,
    NODE_SELF,
    NODE_ARGS_AUX,
    NODE_ARGS,
    NODE_LASGN,
    NODE_DVAR,
    NODE_BEGIN,
    NODE_CLASS,
    NODE_COLON2,
    NODE_LAST
};

typedef struct RNode {
    VALUE type;
    union {
        VALUE value;
        struct RNode *node;
    } u1;
    union {
        VALUE value;
        struct RNode *node;
        long argc;
    } u2;
    union {
        VALUE value;
        struct RNode *node;
        struct tiny_ruby_parser_args_info  *args;
    } u3;
    rb_code_location_t nd_loc;
    int node_id;
    int newline;
    VALUE var_table;
} NODE;

struct tiny_ruby_parser_args_info {
    int pre_args_num;
    ID rest_arg;
    NODE *kw_rest_arg;
    unsigned int no_kwarg: 1;
};

typedef union {
    VALUE value;
    NODE *node;
} tiny_ruby_value;

typedef struct {
    struct tiny_ruby_parser_context_tag *ctx;
} tiny_ruby_context_ext;

#define nd_head  u1.node
#define nd_cpath u1.node
#define nd_vid   u1.value
#define nd_mid   u2.value
#define nd_end   u2.node
#define nd_value u2.node
#define nd_alen  u2.argc
#define nd_plen  u2.argc
#define nd_args  u3.node
#define nd_next  u3.node
#define nd_defn  u3.node
#define nd_super u3.node
#define nd_ainfo u3.args
#ifdef __cplusplus
extern "C" {
#endif

typedef struct tiny_ruby_parser_context_tag tiny_ruby_parser_context_t;

tiny_ruby_parser_context_t *tiny_ruby_parser_create(tiny_ruby_context_ext *auxil);
int tiny_ruby_parser_parse(tiny_ruby_parser_context_t *ctx, tiny_ruby_value *ret);
void tiny_ruby_parser_destroy(tiny_ruby_parser_context_t *ctx);

#ifdef __cplusplus
}
#endif

#endif /* !PACKCR_INCLUDED_PARSER_H */
